'use strict';
var _ = require('lodash');
var uuid = require('uuid');

function formatGalvanizeConfig(config) {
    var options = config.options || [];
    var configs = config.configs || [];
    var formattedOptions;
    var formattedConfigs;
    if (_.isArray(options)) {
        formattedOptions = _.cloneDeep(options);
    } else {
        formattedOptions = _.map(options, function(value, key) {
            return { key: key, value: _.cloneDeep(value) };
        });
    }

    if (_.isArray(configs)) {
        formattedConfigs = _.cloneDeep(configs);
    } else {
        formattedConfigs = _.map(configs, function(value, key) {
            return { key: key, value: _.cloneDeep(value) };
        });
    }

    return { options: formattedOptions, configs: formattedConfigs };
}

function setGalvanizeOptions(grunt, config) {
    var options = config.options;
    var configs = config.configs;

    options.forEach(function(option) {
        grunt.option(option.key, option.value);
    });

    configs.forEach(function(config) {
        grunt.config(config.key, config.value);
    });
}

module.exports = function(grunt) {
    grunt.registerTask(
        'galvanize',
        'Run a single task multiple times with different options',
        function(taskName,param1,param2,param3) {

            var paramCount = arguments.length-1;
            var params = [];

            while(paramCount > 0) {
                params.push(arguments[paramCount]);
                paramCount--;
            } 

            var galvanizeConfig = grunt.option('galvanizeConfig');
            var subTaskId = 'galvanize-' + 'taskName' + uuid.v1();

            // validate inputs
            if (!grunt.task.exists(taskName)) {
                throw new Error([
                    'Galvanize: task `',
                    taskName,
                    '` not registered.'
                ].join(''));
            }

            if (!galvanizeConfig || !_.isArray(galvanizeConfig)) {
                throw new Error([
                    'Galvanize: requires an array set in options: use ',
                    '`grunt.option(\'galvanizeConfig\', myList);`'
                ].join(''));
            }

            var galvanizedTaskName;
            galvanizeConfig.forEach(function(config, index) {
                galvanizedTaskName = subTaskId + '-' + index;
                grunt.config(
                    [galvanizedTaskName, 'galvanizeConfig'],
                    formatGalvanizeConfig(config)
                );
                grunt.registerTask(
                    galvanizedTaskName,
                    'auto-generated by grunt-galvanize to call ' + taskName,
                    function runGalvanizedTask() {
                        var config = grunt.config(
                            [this.name, 'galvanizeConfig']
                        );

                        setGalvanizeOptions(grunt, config);

                        //run original task
                        if(params.length !== 0) {
                            grunt.task.run(taskName+':'+params.join(':'));
                        } else {
                            grunt.task.run(taskName);
                        }
                    }
                );

                grunt.task.run(galvanizedTaskName);
            });
        }
    );
};
